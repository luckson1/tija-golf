generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_challenges {
  id          String      @id @db.Uuid
  factor_id   String      @db.Uuid
  created_at  DateTime    @db.Timestamptz(6)
  verified_at DateTime?   @db.Timestamptz(6)
  ip_address  String      @db.Inet
  mfa_factors mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_factors {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  friendly_name  String?
  factor_type    factor_type
  status         factor_status
  created_at     DateTime         @db.Timestamptz(6)
  updated_at     DateTime         @db.Timestamptz(6)
  secret         String?
  mfa_challenges mfa_challenges[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  from_ip_address String?       @db.Inet
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                 String?              @db.Uuid
  id                          String               @id @db.Uuid
  aud                         String?              @db.VarChar(255)
  role                        String?              @db.VarChar(255)
  email                       String?              @db.VarChar(255)
  encrypted_password          String?              @db.VarChar(255)
  email_confirmed_at          DateTime?            @db.Timestamptz(6)
  invited_at                  DateTime?            @db.Timestamptz(6)
  confirmation_token          String?              @db.VarChar(255)
  confirmation_sent_at        DateTime?            @db.Timestamptz(6)
  recovery_token              String?              @db.VarChar(255)
  recovery_sent_at            DateTime?            @db.Timestamptz(6)
  email_change_token_new      String?              @db.VarChar(255)
  email_change                String?              @db.VarChar(255)
  email_change_sent_at        DateTime?            @db.Timestamptz(6)
  last_sign_in_at             DateTime?            @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?            @db.Timestamptz(6)
  updated_at                  DateTime?            @db.Timestamptz(6)
  phone                       String?              @unique
  phone_confirmed_at          DateTime?            @db.Timestamptz(6)
  phone_change                String?              @default("")
  phone_change_token          String?              @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?            @db.Timestamptz(6)
  confirmed_at                DateTime?            @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?              @default("") @db.VarChar(255)
  email_change_confirm_status Int?                 @default(0) @db.SmallInt
  banned_until                DateTime?            @db.Timestamptz(6)
  reauthentication_token      String?              @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?            @db.Timestamptz(6)
  is_sso_user                 Boolean              @default(false)
  deleted_at                  DateTime?            @db.Timestamptz(6)
  Booking                     Booking[]
  EventMember                 EventMember[]
  LikedEventMember            LikedEventMember[]
  OrganizationMember          OrganizationMember[]
  Payment                     Payment[]
  Profile                     Profile?
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  sessions                    sessions[]
  LeaderBoardPoint            LeaderBoardPoint[]

  @@index([instance_id])
  @@schema("auth")
}

model Organization {
  id                 String               @id @default(cuid())
  name               String
  image              String
  location           String
  Class              Class[]
  OrganizationMember OrganizationMember[]
  Payment            Payment[]
  Tee                Tee[]
  Tournament         Tournament[]

  @@schema("auth")
}

model OrganizationMember {
  usersId        String       @db.Uuid
  organizationId String
  organisation   Organization @relation(fields: [organizationId], references: [id])
  user           users        @relation(fields: [usersId], references: [id])

  @@id([usersId, organizationId])
  @@schema("auth")
}

model Booking {
  id           String        @id @default(cuid())
  eventId      String?
  classId      String?
  tournamentId String?
  bookingDate  DateTime      @default(now())
  usersId      String        @db.Uuid
  teeId        String?
  status       PaymentStatus @default(Pending)
  bookingRef   Int           @default(autoincrement())
  class        Class?        @relation(fields: [classId], references: [id])
  event        Event?        @relation(fields: [eventId], references: [id])
  tee          Tee?          @relation(fields: [teeId], references: [id])
  tournament   Tournament?   @relation(fields: [tournamentId], references: [id])
  user         users         @relation(fields: [usersId], references: [id])
  payments     Payment[]

  @@schema("auth")
}

model Tee {
  id             String       @id @default(cuid())
  startDate      DateTime
  organizationId String
  holes          String       @default("9 holes")
  isExistingGame String       @default("No")
  kit            String       @default("No")
  bookings       Booking[]
  payments       Payment[]
  organisation   Organization @relation(fields: [organizationId], references: [id])

  @@schema("auth")
}

model EventMember {
  usersId       String      @db.Uuid
  listedEventId String
  events        ListedEvent @relation(fields: [listedEventId], references: [id])
  user          users       @relation(fields: [usersId], references: [id])

  @@id([usersId, listedEventId])
  @@schema("auth")
}

model LikedEventMember {
  usersId       String      @db.Uuid
  listedEventId String
  events        ListedEvent @relation(fields: [listedEventId], references: [id])
  user          users       @relation(fields: [usersId], references: [id])

  @@id([usersId, listedEventId])
  @@schema("auth")
}

model ListedEvent {
  id               String             @id @default(cuid())
  name             String
  location         String
  description      String
  image            String
  startDate        DateTime           @default(now())
  type             String             @default("Tournament")
  Event            Event[]
  EventMember      EventMember[]
  LikedEventMember LikedEventMember[]
  Package          Package[]
  Payment          Payment[]

  @@schema("auth")
}

model Event {
  id             String      @id @default(cuid())
  startDate      DateTime
  holes          String      @default("9 holes")
  isExistingGame String      @default("No")
  kit            String      @default("No")
  listedEventId  String
  packageId      String
  bookings       Booking[]
  ListedEvent    ListedEvent @relation(fields: [listedEventId], references: [id])
  package        Package     @relation(fields: [packageId], references: [id])
  payments       Payment[]

  @@schema("auth")
}

model Package {
  id            String      @id @default(cuid())
  amount        String
  name          String
  listedEventId String
  Event         Event[]
  event         ListedEvent @relation(fields: [listedEventId], references: [id])

  @@schema("auth")
}

model Class {
  id             String          @id @default(cuid())
  description    String
  startDate      DateTime
  endDate        DateTime
  organizationId String
  cohort         Int
  bookings       Booking[]
  organisation   Organization    @relation(fields: [organizationId], references: [id])
  schedules      ClassSchedule[]
  payments       Payment[]

  @@schema("auth")
}

model ClassSchedule {
  id        String    @id @default(cuid())
  classId   String
  dayOfWeek DayOfWeek
  startTime String
  endTime   String
  class     Class     @relation(fields: [classId], references: [id])

  @@schema("auth")
}

model Tournament {
  id             String       @id @default(cuid())
  name           String
  description    String
  startDate      DateTime
  endDate        DateTime
  organizationId String
  bookings       Booking[]
  payments       Payment[]
  organisation   Organization @relation(fields: [organizationId], references: [id])

  @@schema("auth")
}

model Profile {
  id           String   @id @default(cuid())
  name         String
  email        String
  usersId      String   @unique @db.Uuid
  gender       Gender
  dateOfBirth  DateTime
  phoneNumber  String
  cohort       Int
  level        String   @default("Beginner")
  countryCode String @default("254")
  memberNumber Int      @default(autoincrement())
  user         users    @relation(fields: [usersId], references: [id])

  @@schema("auth")
}

model Payment {
  id                String        @id @default(cuid())
  bookingId         String
  amount            Float
  status            PaymentStatus @default(Pending)
  paymentDate       DateTime      @default(now())
  paymentMethod     String?
  eventId           String?
  classId           String?
  tournamentId      String?
  organizationId    String
  usersId           String        @db.Uuid
  teeId             String?
  checkoutRequestID Int?
  listedEventId     String?
  booking           Booking       @relation(fields: [bookingId], references: [id])
  Class             Class?        @relation(fields: [classId], references: [id])
  Event             Event?        @relation(fields: [eventId], references: [id])
  ListedEvent       ListedEvent?  @relation(fields: [listedEventId], references: [id])
  organisation      Organization  @relation(fields: [organizationId], references: [id])
  Tee               Tee?          @relation(fields: [teeId], references: [id])
  Tournament        Tournament?   @relation(fields: [tournamentId], references: [id])
  user              users         @relation(fields: [usersId], references: [id])

  @@schema("auth")
}

model Partner {
  id          String @id @default(cuid())
  name        String
  image       String
  email       String
  phone       String
  location    String
  website     String
  description String

  @@schema("auth")
}

model LeaderBoardPoint {
  id            String      @id @default(cuid())
  user          users       @relation(fields: [usersId], references: [id])
  points        Int
  usersId       String      @db.Uuid
  board         LeaderBoard @relation(fields: [leaderBoardId], references: [id])
  leaderBoardId String

  @@schema("auth")
}

model LeaderBoard {
  id               String             @id @default(cuid())
  date             DateTime           @default(now())
  LeaderBoardPoint LeaderBoardPoint[]

  @@schema("auth")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday

  @@schema("auth")
}

enum Gender {
  male
  female

  @@schema("auth")
}

enum PaymentStatus {
  Pending
  Completed
  Failed
  Refunded
  Partial
  Expired
  Received
  Rejected
  Accepted


  @@schema("auth")
}

enum BookingStatus {
  Pending
  Confirmed
  Completed
  Failed
  Refunded
  Partial

  @@schema("auth")
}
