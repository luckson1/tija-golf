generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

model Organization {
  id                 String               @id @default(cuid())
  name               String
  image              String
  location           String
  Class              Class[]
  OrganizationMember OrganizationMember[]
  Payment            Payment[]
  Tee                Tee[]
  Tournament         Tournament[]

  @@schema("auth")
}

model OrganizationMember {
  usersId        String
  organizationId String
  organisation   Organization @relation(fields: [organizationId], references: [id])

  @@id([usersId, organizationId])
  @@schema("auth")
}

model Booking {
  id           String        @unique @default(cuid())
  eventId      String?
  classId      String?
  tournamentId String?
  bookingDate  DateTime      @default(now())
  usersId      String
  teeId        String?
  status       PaymentStatus @default(Pending)
  bookingRef   Int           @unique @default(autoincrement())
  class        Class?        @relation(fields: [classId], references: [id])
  event        Event?        @relation(fields: [eventId], references: [id])
  tee          Tee?          @relation(fields: [teeId], references: [id])
  tournament   Tournament?   @relation(fields: [tournamentId], references: [id])
  payments     Payment?

  @@id([id, usersId])
  @@schema("auth")
}

model Tee {
  id             String       @id @default(cuid())
  startDate      DateTime
  organizationId String
  holes          String       @default("9 holes")
  isExistingGame String       @default("No")
  kit            String       @default("No")
  bookings       Booking[]
  payments       Payment[]
  organisation   Organization @relation(fields: [organizationId], references: [id])

  @@schema("auth")
}

model EventMember {
  usersId       String
  listedEventId String
  events        ListedEvent @relation(fields: [listedEventId], references: [id])

  @@id([usersId, listedEventId])
  @@schema("auth")
}

model LikedEventMember {
  usersId       String
  listedEventId String
  events        ListedEvent @relation(fields: [listedEventId], references: [id])

  @@id([usersId, listedEventId])
  @@schema("auth")
}

model ListedEvent {
  id               String             @id @default(cuid())
  name             String
  location         String
  description      String
  image            String
  startDate        DateTime           @default(now())
  type             String             @default("Tournament")
  Event            Event[]
  EventMember      EventMember[]
  LikedEventMember LikedEventMember[]
  Package          Package[]
  Payment          Payment[]

  @@schema("auth")
}

model Event {
  id             String      @id @default(cuid())
  startDate      DateTime
  holes          String      @default("9 holes")
  isExistingGame String      @default("No")
  kit            String      @default("No")
  listedEventId  String
  packageId      String
  bookings       Booking[]
  ListedEvent    ListedEvent @relation(fields: [listedEventId], references: [id])
  package        Package     @relation(fields: [packageId], references: [id])
  payments       Payment[]

  @@schema("auth")
}

model Package {
  id            String      @id @default(cuid())
  amount        String
  name          String
  listedEventId String
  Event         Event[]
  event         ListedEvent @relation(fields: [listedEventId], references: [id])

  @@schema("auth")
}

model Class {
  id             String          @id @default(cuid())
  description    String
  startDate      DateTime
  endDate        DateTime
  organizationId String
  cohort         Int
  bookings       Booking[]
  organisation   Organization    @relation(fields: [organizationId], references: [id])
  schedules      ClassSchedule[]
  payments       Payment[]

  @@schema("auth")
}

model ClassSchedule {
  id        String    @id @default(cuid())
  classId   String
  dayOfWeek DayOfWeek
  startTime String
  endTime   String
  class     Class     @relation(fields: [classId], references: [id])

  @@schema("auth")
}

model Tournament {
  id             String       @id @default(cuid())
  name           String
  description    String
  startDate      DateTime
  endDate        DateTime
  organizationId String
  bookings       Booking[]
  payments       Payment[]
  organisation   Organization @relation(fields: [organizationId], references: [id])

  @@schema("auth")
}

model Profile {
  id               String             @id @default(cuid())
  name             String
  email            String
  usersId          String             @unique
  gender           Gender
  dateOfBirth      DateTime
  phoneNumber      String
  cohort           Int
  level            String             @default("Beginner")
  countryCode      String             @default("254")
  memberNumber     Int                @default(autoincrement())
  LeaderBoardPoint LeaderBoardPoint[]

  @@schema("auth")
}

model Payment {
  id                String        @id @default(cuid())
  bookingId         String        @unique
  amount            Float
  status            PaymentStatus @default(Pending)
  paymentDate       DateTime      @default(now())
  paymentMethod     String?
  eventId           String?
  classId           String?
  tournamentId      String?
  organizationId    String
  usersId           String
  teeId             String?
  checkoutRequestID Int?
  listedEventId     String?
  booking           Booking       @relation(fields: [bookingId], references: [id])
  Class             Class?        @relation(fields: [classId], references: [id])
  Event             Event?        @relation(fields: [eventId], references: [id])
  ListedEvent       ListedEvent?  @relation(fields: [listedEventId], references: [id])
  organisation      Organization  @relation(fields: [organizationId], references: [id])
  Tee               Tee?          @relation(fields: [teeId], references: [id])
  Tournament        Tournament?   @relation(fields: [tournamentId], references: [id])

  @@schema("auth")
}

model Partner {
  id          String @id @default(cuid())
  name        String
  image       String
  email       String
  phone       String
  location    String
  website     String
  description String

  @@schema("auth")
}

model LeaderBoardPoint {
  id            String      @id @default(cuid())
  points        Int
  leaderBoardId String
  profile       Profile     @relation(fields: [profileId], references: [id])
  board         LeaderBoard @relation(fields: [leaderBoardId], references: [id])
  profileId     String

  @@schema("auth")
}

model LeaderBoard {
  id               String             @id @default(cuid())
  date             DateTime           @default(now())
  LeaderBoardPoint LeaderBoardPoint[]

  @@schema("auth")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday

  @@schema("auth")
}

enum Gender {
  male
  female

  @@schema("auth")
}

enum PaymentStatus {
  Pending
  Completed
  Failed
  Refunded
  Partial
  Expired
  Received
  Rejected
  Accepted

  @@schema("auth")
}

enum BookingStatus {
  Pending
  Completed
  Failed
  Refunded
  Partial
  Expired
  Received
  Rejected
  Accepted

  @@schema("auth")
}
