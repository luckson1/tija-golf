generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

model Organization {
  id                 String               @id @default(cuid())
  name               String
  image              String
  location           String
  kitPrice           Int                  @default(1500)
  teePrice           Float                @default(4500)
  Class              Class[]
  OrganizationMember OrganizationMember[]
  Payment            Payment[]
  Tee                Tee[]
  Tournament         Tournament[]
  HolesPrices        HolesPrices[]
  KitPrices          KitPrices[]

  @@schema("auth")
}

enum HolesNumber {
  Nine
  Eighteen

  @@schema("auth")
}

model HolesPrices {
  id             String        @id @default(cuid())
  amount         Float
  numberOfHoles  HolesNumber
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  ListedEvent    ListedEvent?  @relation(fields: [listedEventId], references: [id])
  listedEventId  String?

  @@schema("auth")
}

model KitPrices {
  id             String        @id @default(cuid())
  amount         Float
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  ListedEvent    ListedEvent?  @relation(fields: [listedEventId], references: [id])
  listedEventId  String?

  @@schema("auth")
}

model OrganizationMember {
  usersId        String
  organizationId String
  organisation   Organization @relation(fields: [organizationId], references: [id])

  @@id([usersId, organizationId])
  @@schema("auth")
}

model Booking {
  id           String        @unique @default(cuid())
  eventId      String?
  classId      String?
  slug         String?
  tournamentId String?
  bookingDate  DateTime      @default(now())
  usersId      String
  teeId        String?
  status       PaymentStatus @default(Pending)
  bookingRef   Int           @unique @default(autoincrement())
  class        Class?        @relation(fields: [classId], references: [id])
  event        Event?        @relation(fields: [eventId], references: [id])
  tee          Tee?          @relation(fields: [teeId], references: [id])
  tournament   Tournament?   @relation(fields: [tournamentId], references: [id])
  payments     Payment?

  @@id([id, usersId])
  @@schema("auth")
}

model Cart {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  usersId   String
  items     ShoppingItem[]
  slug      String?
  cartRef   Int            @default(autoincrement())
  total     Float          @default(0)

  // ... other fields
  @@schema("auth")
}

model ShoppingItem {
  id        String @id @default(cuid())
  cartId    String
  cart      Cart   @relation(fields: [cartId], references: [id])
  productId String // WooCommerce product ID
  name      String // Product name from WooCommerce
  price     Float // Product price from WooCommerce
  quantity  Int // Quantity of the product
  src       String

  // ... other fields that might be relevant, such as product image URL, etc.
  @@schema("auth")
}

model Tee {
  id             String       @id @default(cuid())
  startDate      DateTime
  organizationId String
  holes          String       @default("9 holes")
  isExistingGame String       @default("No")
  kit            String       @default("No")
  bookings       Booking[]
  payments       Payment[]
  organisation   Organization @relation(fields: [organizationId], references: [id])

  @@schema("auth")
}

model EventMember {
  usersId       String
  listedEventId String
  events        ListedEvent @relation(fields: [listedEventId], references: [id])

  @@id([usersId, listedEventId])
  @@schema("auth")
}

model LikedEventMember {
  usersId       String
  listedEventId String
  events        ListedEvent @relation(fields: [listedEventId], references: [id])

  @@id([usersId, listedEventId])
  @@schema("auth")
}

model ListedEvent {
  id               String             @id @default(cuid())
  name             String
  location         String
  description      String
  image            String
  kitPrice         Int                @default(1500)
  startDate        DateTime           @default(now())
  type             String             @default("Tournament")
  Event            Event[]
  EventMember      EventMember[]
  LikedEventMember LikedEventMember[]
  Package          Package[]
  Payment          Payment[]
  KitPrices        KitPrices[]
  HolesPrices      HolesPrices[]

  @@schema("auth")
}

model Event {
  id             String      @id @default(cuid())
  startDate      DateTime
  holes          String      @default("9 holes")
  isExistingGame String      @default("No")
  kit            String      @default("No")
  listedEventId  String
  packageId      String
  bookings       Booking[]
  ListedEvent    ListedEvent @relation(fields: [listedEventId], references: [id])
  package        Package     @relation(fields: [packageId], references: [id])
  payments       Payment[]

  @@schema("auth")
}

model Package {
  id            String      @id @default(cuid())
  amount        String
  price         Int         @default(0)
  name          String
  listedEventId String
  Event         Event[]
  event         ListedEvent @relation(fields: [listedEventId], references: [id])

  @@schema("auth")
}

model Class {
  id             String          @id @default(cuid())
  description    String
  startDate      DateTime
  endDate        DateTime
  organizationId String
  cohort         Int
  bookings       Booking[]
  organisation   Organization    @relation(fields: [organizationId], references: [id])
  schedules      ClassSchedule[]
  payments       Payment[]

  @@schema("auth")
}

model ClassSchedule {
  id        String    @id @default(cuid())
  classId   String
  dayOfWeek DayOfWeek
  startTime String
  endTime   String
  class     Class     @relation(fields: [classId], references: [id])

  @@schema("auth")
}

model Tournament {
  id             String       @id @default(cuid())
  name           String
  description    String
  startDate      DateTime
  endDate        DateTime
  organizationId String
  bookings       Booking[]
  payments       Payment[]
  organisation   Organization @relation(fields: [organizationId], references: [id])

  @@schema("auth")
}

model Profile {
  id               String             @id @default(cuid())
  name             String
  email            String
  usersId          String             @unique
  gender           Gender
  dateOfBirth      DateTime
  phoneNumber      String
  cohort           Int
  level            String             @default("Beginner")
  countryCode      String             @default("254")
  memberNumber     Int                @default(autoincrement())
  LeaderBoardPoint LeaderBoardPoint[]
  image            String             @default("https://res.cloudinary.com/dhciks96e/image/upload/v1703149574/DALL_E_2023-12-21_12.05.54_-_A_realistic_headshot_of_a_30-year-old_Kenyan_man_with_a_friendly_and_confident_expression._He_s_wearing_a_golf_cap_and_a_polo_shirt_suggesting_his_in_mg0tge.png")

  @@schema("auth")
}

model Payment {
  id                String        @id @default(cuid())
  bookingId         String?       @unique
  amount            Float
  status            PaymentStatus @default(Pending)
  paymentDate       DateTime      @default(now())
  paymentMethod     String?
  eventId           String?
  classId           String?
  tournamentId      String?
  organizationId    String?
  usersId           String?
  teeId             String?
  checkoutRequestID String?
  description       String?
  listedEventId     String?
  booking           Booking?      @relation(fields: [bookingId], references: [id])
  Class             Class?        @relation(fields: [classId], references: [id])
  Event             Event?        @relation(fields: [eventId], references: [id])
  ListedEvent       ListedEvent?  @relation(fields: [listedEventId], references: [id])
  organisation      Organization? @relation(fields: [organizationId], references: [id])
  Tee               Tee?          @relation(fields: [teeId], references: [id])
  Tournament        Tournament?   @relation(fields: [tournamentId], references: [id])

  @@schema("auth")
}

model WebhookJson {
  id        String   @id @default(cuid())
  body      Json
  createdAt DateTime @default(now())

  @@schema("auth")
}

model Partner {
  id          String @id @default(cuid())
  name        String
  image       String
  email       String
  phone       String
  location    String
  website     String
  description String

  @@schema("auth")
}

model LeaderBoardPoint {
  id            String      @id @default(cuid())
  points        Int
  leaderBoardId String
  profile       Profile     @relation(fields: [profileId], references: [id])
  board         LeaderBoard @relation(fields: [leaderBoardId], references: [id])
  profileId     String

  @@schema("auth")
}

model LeaderBoard {
  id               String             @id @default(cuid())
  date             DateTime           @default(now())
  LeaderBoardPoint LeaderBoardPoint[]

  @@schema("auth")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday

  @@schema("auth")
}

enum Gender {
  male
  female

  @@schema("auth")
}

enum PaymentStatus {
  Pending
  Completed
  Failed
  Refunded
  Partial
  Expired
  Received
  Rejected
  Accepted

  @@schema("auth")
}

enum BookingStatus {
  Pending
  Completed
  Failed
  Refunded
  Partial
  Expired
  Received
  Rejected
  Accepted

  @@schema("auth")
}
